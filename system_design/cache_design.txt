http://www.javaworld.com/article/2075440/core-java/develop-a-generic-caching-service-to-improve-performance.html

http://www.tutorialspoint.com/guava/guava_caching_utilities.htm
JavaCachingwithGuava.pdf
http://www.baeldung.com/guava-cache
https://guava-libraries.googlecode.com/files/JavaCachingwithGuava.pdf


memcached design vs redis:
http://key-value-stories.blogspot.com/2015/02/memcached-internals-design.html

memcached internals.
https://www.adayinthelifeof.nl/2011/02/06/memcache-internals/


cache, LRU code, concurrent:
http://www.careercup.com/question?id=17230678

package cache;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

public class  LRUCache<K,V> {
	
	private  ConcurrentLinkedQueue<K> concurrentLinkedQueue = new ConcurrentLinkedQueue<K>();
	
	private  ConcurrentHashMap<K,V> concurrentHashMap = new ConcurrentHashMap<K, V>();
	
	private ReadWriteLock readWriteLock = new ReentrantReadWriteLock();
	
	private Lock readLock = readWriteLock.readLock();
	
	private Lock writeLock = readWriteLock.writeLock();
	
	int maxSize=0;
	
	public LRUCache(final int MAX_SIZE){
		this.maxSize=MAX_SIZE;
	}
	
	public V getElement(K key){
		
		readLock.lock();
		try {
		V v=null;
		  if(concurrentHashMap.contains(key)){
			  concurrentLinkedQueue.remove(key);
			  v= concurrentHashMap.get(key);
				concurrentLinkedQueue.add(key);
		  }
		  
		
		return v;
		}finally{
			readLock.unlock();
		}
	}
	
	public V removeElement(K key){
		 writeLock.lock();
		 try {
		V v=null;
		if(concurrentHashMap.contains(key)){
		v=concurrentHashMap.remove(key);
			concurrentLinkedQueue.remove(key);
		}
		
		return v;
		 } finally {
			 writeLock.unlock();
		 }
	}
	
	public V addElement(K key,V value){
		writeLock.lock();
		try {
		if(concurrentHashMap.contains(key)){
			 concurrentLinkedQueue.remove(key);
		}
		while(concurrentLinkedQueue.size() >=maxSize){
			 K queueKey=concurrentLinkedQueue.poll();
			 concurrentHashMap.remove(queueKey);
		}
		concurrentLinkedQueue.add(key);
		concurrentHashMap.put(key, value);
		
		return value;
		} finally{
			writeLock.unlock();
		}
	}
}
